//------------------------------------------------------------------------------
//        This code was generated by myriad.
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------
namespace TypeSafeInternals

module NpgsqlFSharpSqlModule =
    open System.Reflection
    let private loadedAssembly =
        Assembly.Load("Npgsql.FSharp, Version=3.10.0.0, Culture=neutral, PublicKeyToken=null")

    let private loadedModule =
        loadedAssembly.GetTypes()
        |> Seq.find (fun (t: System.Type) -> t.FullName = "Npgsql.FSharp.SqlModule")

    open Npgsql.FSharp
    open Npgsql
    open Microsoft.FSharp.Collections

    let p_defaultConString =
        TheAngryByrd.TypeSafeInternals.Delegate.createStaticArity0<Sql.ConnectionStringBuilder>
            loadedModule
            "defaultConString"

    let p_defaultProps =
        TheAngryByrd.TypeSafeInternals.Delegate.createStaticArity0<Sql.SqlProps> loadedModule "defaultProps"

    let p_newConnection props =
        TheAngryByrd.TypeSafeInternals.Delegate.createStaticArity1<Sql.SqlProps, NpgsqlConnection>
            loadedModule
            "newConnection"
            props

    let p_getConnection props =
        TheAngryByrd.TypeSafeInternals.Delegate.createStaticArity1<Sql.SqlProps, NpgsqlConnection>
            loadedModule
            "getConnection"
            props

    let p_populateRow cmd row =
        TheAngryByrd.TypeSafeInternals.Delegate.createStaticArity2ReturningUnit<NpgsqlCommand, list<string * SqlValue>>
            loadedModule
            "populateRow"
            cmd
            row

    let p_populateCmd cmd props =
        TheAngryByrd.TypeSafeInternals.Delegate.createStaticArity2ReturningUnit<NpgsqlCommand, Sql.SqlProps>
            loadedModule
            "populateCmd"
            cmd
            props

module NpgsqlFSharpUtils =
    open System.Reflection
    let private loadedAssembly =
        Assembly.Load("Npgsql.FSharp, Version=3.10.0.0, Culture=neutral, PublicKeyToken=null")

    let private loadedModule =
        loadedAssembly.GetTypes()
        |> Seq.find (fun (t: System.Type) -> t.FullName = "Npgsql.FSharp.Utils")

    open Microsoft.FSharp.Core
    open Npgsql.FSharp

    let p_sqlMap option f =
        TheAngryByrd.TypeSafeInternals.Delegate.createStaticArity2<option<'a>, 'a -> SqlValue, SqlValue>
            loadedModule
            "sqlMap"
            option
            f

module PostgresUri =
    open System.Reflection
    let private loadedAssembly =
        Assembly.Load("Npgsql.FSharp, Version=3.10.0.0, Culture=neutral, PublicKeyToken=null")

    let private loadedModule =
        loadedAssembly.GetTypes()
        |> Seq.find (fun (t: System.Type) -> t.FullName = "PostgresUri")

    open System
    open Microsoft.FSharp.Core

    let p_extractHost uri =
        TheAngryByrd.TypeSafeInternals.Delegate.createStaticArity1<Uri, option<string>> loadedModule "extractHost" uri

    let p_extractUser uri =
        TheAngryByrd.TypeSafeInternals.Delegate.createStaticArity1<Uri, option<string>> loadedModule "extractUser" uri

    let p_extractDatabase uri =
        TheAngryByrd.TypeSafeInternals.Delegate.createStaticArity1<Uri, option<string>>
            loadedModule
            "extractDatabase"
            uri

    let p_extractPort uri =
        TheAngryByrd.TypeSafeInternals.Delegate.createStaticArity1<Uri, option<string>> loadedModule "extractPort" uri
